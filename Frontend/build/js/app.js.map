{"version":3,"sources":["main.js","appControllers.js","appServices.js"],"names":[],"mappingshxdfile":"app.js","sourcesContent":["'use strict';\r\n\r\n/* App Module */\r\n\r\nvar watPhaSomApp = angular.module('watPhaSomApp', [\r\n  'ngRoute',\r\n  'ngCookies',\r\n  'ngNotify',\r\n  'appControllers',\r\n  'appServices'\r\n]);\r\n\r\nwatPhaSomApp.config(['$routeProvider',\r\n  function($routeProvider) {\r\n    $routeProvider.\r\n        when('/', {\r\n          templateUrl: 'partials/home/home.html',\r\n          controller: 'HomeCtrl'\r\n          }).\r\n        /*Home*/\r\n        when('/login/', {\r\n          templateUrl: 'partials/home/login.html',\r\n          controller: 'LoginCtrl'\r\n        }).\r\n        when('/register/', {\r\n          templateUrl: 'partials/home/register.html',\r\n          controller: 'RegisterCtrl'\r\n        }).\r\n        when('/product/:id', {\r\n          templateUrl: 'partials/product/detail.html',\r\n          controller: 'DetailCtrl'\r\n        }).\r\n        when('/product/:id/review', {\r\n          templateUrl: 'partials/product/review.html',\r\n          controller: 'ReviewCtrl'\r\n        }).\r\n\r\n        /*Admin*/\r\n        when('/admin/', {\r\n           templateUrl: 'partials/admin/manage.html',\r\n           controller: 'AdminCtrl'\r\n        }).\r\n        when('/admin/login/', {\r\n           templateUrl: 'partials/home/login.html',\r\n           controller: 'AdminLoginCtrl'\r\n        }).\r\n        when('/admin/members/', {\r\n           templateUrl: 'partials/admin/members.html',\r\n           controller: 'AdminMembersCtrl'\r\n        }).\r\n        when('/admin/products/', {\r\n           templateUrl: 'partials/admin/products.html',\r\n           controller: 'AdminProductsCtrl'\r\n        }).\r\n        when('/admin/products/create', {\r\n           templateUrl: 'partials/admin/create.html',\r\n           controller: 'AdminProductCreateCtrl'\r\n        }).\r\n        when('/admin/products/edit/:id', {\r\n           templateUrl: 'partials/admin/create.html',\r\n           controller: 'AdminProductEditCtrl'\r\n        }).\r\n        when('/admin/order/:id', {\r\n           templateUrl: 'partials/admin/order.html',\r\n           controller: 'AdminOrderCtrl'\r\n        }).\r\n        when('/admin/orders/', {\r\n           templateUrl: 'partials/admin/orders.html',\r\n           controller: 'AdminOrdersCtrl'\r\n        }).\r\n        when('/admin/payments/', {\r\n           templateUrl: 'partials/admin/payments.html',\r\n           controller: 'AdminPaymentsCtrl'\r\n        }).\r\n        when('/admin/check/:id', {\r\n            templateUrl: 'partials/admin/check.html',\r\n            controller: 'AdminCheckCtrl'\r\n        }).\r\n\r\n        /*User*/\r\n        when('/cart/', {\r\n           templateUrl: 'partials/product/cart.html',\r\n           controller: 'CartCtrl'\r\n        }).\r\n        when('/order/', {\r\n           templateUrl: 'partials/product/order.html',\r\n           controller: 'OrderCtrl'\r\n        }).\r\n        when('/orders/', {\r\n           templateUrl: 'partials/product/orders.html',\r\n           controller: 'OrdersCtrl'\r\n        }).\r\n        when('/payment/', {\r\n           templateUrl: 'partials/product/confirm.html',\r\n           controller: 'ConfirmCtrl'\r\n        }).\r\n        when('/payment/normal', {\r\n           templateUrl: 'partials/product/normalPay.html',\r\n           controller: 'PaymentCtrl'\r\n        }).\r\n        when('/payment/paypal', {\r\n           templateUrl: 'partials/product/paypal.html',\r\n           controller: 'PaypalCtrl'\r\n        }).\r\n        when('/summary', {\r\n           templateUrl: 'partials/product/summary.html',\r\n           controller: 'SummaryCtrl'\r\n        }).\r\n        otherwise({\r\n            redirectTo: '/'\r\n        });\r\n  }]);\r\n","/* Controllers */\r\nvar appControllers = angular.module('appControllers', []);\r\n/*Home Controllers*/\r\nappControllers.controller('HomeCtrl', ['$scope', '$location', '$cookies', 'ProductSrv', 'CartSrv', 'ngNotify',\r\n    function($scope, $location, $cookies, productSrv, cartSrv, ngNotify) {\r\n        var self = this;\r\n        $scope.products = null;\r\n        $scope.wholesalePrice = function(price){\r\n            return Math.round((parseInt(price) * 0.1) * 100) / 100\r\n        }\r\n        $scope.loadProducts = function(res) {\r\n            if (res.status == 200) {\r\n                $scope.products = res.data;\r\n            }\r\n        }\r\n        $scope.addToCart = function(product) {\r\n            if ($cookies.get('auth') ? true : false) {\r\n                cartSrv.add(product, 1);\r\n                ngNotify.set(\"New Item Added.\", 'success');\r\n            } else {\r\n                $location.path('/login/');\r\n            }\r\n        };\r\n        $scope.isWholesale = function() {\r\n            var raw = $cookies.get('user');\r\n            if(raw){\r\n                var user = JSON.parse(raw);\r\n                if (user) {\r\n                    if (user.type == 2) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        productSrv.fetch($scope.loadProducts);\r\n    }\r\n]);\r\nappControllers.controller('LoginCtrl', ['$scope', '$rootScope', '$location', '$cookies', 'UserSrv',\r\n    function($scope, $rootScope, $location, $cookies, userSrv) {\r\n        var self = this;\r\n        $scope.user = {};\r\n        $scope.isInValid = false;\r\n        $scope.validate = function(user) {\r\n            userSrv.validate(user, $scope.attempt);\r\n        };\r\n        $scope.attempt = function(res) {\r\n            if (res.data) {\r\n                console.log(res.data);\r\n                $cookies.put('auth', true);\r\n                $cookies.put('user', JSON.stringify(res.data));\r\n                $rootScope.$broadcast('isUser');\r\n                $location.path('/product');\r\n                $location.replace();\r\n            } else {\r\n                $scope.isInValid = true;\r\n            }\r\n        }\r\n    }\r\n]);\r\nappControllers.controller('RegisterCtrl', ['$scope', '$rootScope', '$location', '$cookies', '$http', 'UserSrv',\r\n    function($scope, $rootScope, $location, $cookies, $http, userSrv) {\r\n        var self = this;\r\n        $scope.user = {\r\n            email: \"\",\r\n            password: \"\",\r\n            type: 1\r\n        };\r\n        $scope.isInValid = false;\r\n        $scope.validate = function(user) {\r\n            userSrv.register(user, $scope.attempt);\r\n        };\r\n        $scope.attempt = function(res) {\r\n            if (res.data) {\r\n                $cookies.put('auth', true);\r\n                $cookies.put('user', JSON.stringify(res.data));\r\n                $rootScope.$broadcast('isUser');\r\n                $location.path('/product');\r\n                $location.replace();\r\n            } else {\r\n                $scope.isInValid = true;\r\n            }\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('DetailCtrl', ['$scope', '$routeParams', 'ProductSrv',\r\n    function($scope, $routeParams, productSrv) {\r\n        var self = this;\r\n        $scope.product = productSrv.getById($routeParams.id);\r\n    }\r\n]);\r\nappControllers.controller('ReviewCtrl', ['$scope', '$routeParams', '$location', '$cookies', 'ProductSrv', 'ngNotify',\r\n    function($scope, $routeParams, $location, $cookies, productSrv, ngNotify) {\r\n        var self = this;\r\n        var raw = $cookies.get('user');\r\n        var path = '/product/' + $routeParams.id;\r\n\r\n        if(!raw){$location.path(path);}\r\n        else{\r\n            var user = JSON.parse(raw);\r\n            if(!user){\r\n                $location.path(path);\r\n            }\r\n        }\r\n        $scope.product = productSrv.getById($routeParams.id);\r\n        $scope.save = function(review) {\r\n            review.email = JSON.parse($cookies.get('user')).email;\r\n            productSrv.list[$routeParams.id - 1].reviews.push(review);\r\n            ngNotify.set(\"New review added.\");\r\n            $location.path(path);\r\n        }\r\n    }\r\n]);\r\n/*Admin Controllers*/\r\nappControllers.controller('AdminCtrl', ['$scope', 'OrderSrv', 'PaymentSrv',\r\n    function($scope, orderSrv, paymentSrv) {\r\n        $scope.orders = orderSrv.list;\r\n        $scope.payments = paymentSrv.list;\r\n    }\r\n]);\r\nappControllers.controller('AdminLoginCtrl', ['$scope', '$rootScope', '$location', '$cookies', '$http', 'AdminSrv',\r\n    function($scope, $rootScope, $location, $cookies, $http, userSrv) {\r\n        var self = this;\r\n        $scope.user = {};\r\n        $scope.isInValid = false;\r\n        // $scope.validate = function(user) {\r\n        //     if (userSrv.validate(user)) {\r\n        //         $cookies.put('admin', true);\r\n        //         $rootScope.$broadcast('isAdmin');\r\n        //         $location.path('/product');\r\n        //         $location.replace();\r\n        //     } else {\r\n        //         $scope.isInValid = true;\r\n        //     }\r\n        // };\r\n        $scope.validate = function(user) {\r\n            userSrv.validate(user, $scope.attempt);\r\n        };\r\n        $scope.attempt = function(res) {\r\n            if (res.data) {\r\n                $cookies.put('admin', true);\r\n                $rootScope.$broadcast('isAdmin');\r\n                $location.path('/product');\r\n                $location.replace();\r\n            } else {\r\n                $scope.isInValid = true;\r\n            }\r\n        }\r\n    }\r\n]);\r\nappControllers.controller('AdminMembersCtrl', ['$scope', '$location', 'UserSrv',\r\n    function($scope, $location, userSrv) {\r\n        $scope.members = userSrv.list;\r\n        $scope.delete = function(index) {\r\n            userSrv.del(index);\r\n        }\r\n    }\r\n]);\r\nappControllers.controller('AdminProductsCtrl', ['$scope', '$location', 'ProductSrv', 'ngNotify',\r\n    function($scope, $location, productSrv, ngNotify) {\r\n        $scope.products = null;\r\n        $scope.loadProducts = function(res) {\r\n            if (res.status == 200) {\r\n                $scope.products = res.data;\r\n            }\r\n        }\r\n        $scope.edit = function(product) {\r\n            var path = '#/admin/products/edit/' + product.id + '/';\r\n            $location.path(path);\r\n        }\r\n        $scope.delete = function(product) {\r\n            productSrv.del(product, $scope.successDelete);\r\n        }\r\n        $scope.successDelete = function(req){\r\n            if(req.data)\r\n                ngNotify.set(\"Item deleted.\",\"success\");\r\n            productSrv.fetch($scope.loadProducts);\r\n        }\r\n        productSrv.fetch($scope.loadProducts);\r\n    }\r\n]);\r\nappControllers.controller('AdminProductCreateCtrl', ['$scope', '$routeParams', 'ProductSrv', 'ngNotify',\r\n    function($scope, $routeParams, productSrv, ngNotify) {\r\n        $scope.product = {\r\n            id: 0,\r\n            name: '',\r\n            price: 0,\r\n            code: '',\r\n            stock: 0\r\n        }\r\n        if ($routeParams.id) {\r\n            $scope.product = productSrv.get($routeParams.id);\r\n        }\r\n        \r\n        $scope.add = function(product) {\r\n            productSrv.add(product, $scope.save);\r\n        };\r\n        $scope.save = function(req) {\r\n            if (!req.data) {\r\n                return ngNotify.set('There is an data missing. Please check.', 'error');\r\n            }\r\n            // product.id = productSrv.list.length + 1;\r\n            // productSrv.add(product);\r\n            return ngNotify.set('Product updated.', 'success');\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('AdminProductEditCtrl', ['$scope', '$routeParams', '$location', 'ProductSrv', 'ngNotify',\r\n    function($scope, $routeParams, $location, productSrv, ngNotify) {\r\n        $scope.product = {\r\n            id: 0,\r\n            name: '',\r\n            price: 0,\r\n            code: '',\r\n            stock: 0\r\n        }\r\n        if ($routeParams.id != '') {\r\n            $scope.product = productSrv.get($routeParams.id);\r\n        }\r\n        // $scope.validate = function(product) {\r\n        //     if (product.name == '') {\r\n        //         return false;\r\n        //     } else if (product.price == 0) {\r\n        //         return false;\r\n        //     } else if (product.code == '') {\r\n        //         return false;\r\n        //     } else if (product.stock == 0) {\r\n        //         return false;\r\n        //     } else return true;\r\n        // };\r\n        // $scope.save = function(product) {\r\n        //     if (!$scope.validate(product)) {\r\n        //         return ngNotify.set('There is an data missing. Please check.', 'error');\r\n        //     }\r\n        //     productSrv.update($routeParams.id, product);\r\n        //     return ngNotify.set('New product added.', 'success');\r\n        // };\r\n\r\n        $scope.add = function(product) {\r\n            productSrv.add(product, $scope.save);\r\n        };\r\n        $scope.save = function(req) {\r\n            if (!req.data) {\r\n                return ngNotify.set('There is an data missing. Please check.', 'error');\r\n            }\r\n            // product.id = productSrv.list.length + 1;\r\n            // productSrv.add(product);\r\n            return ngNotify.set('Product updated.', 'success');\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('AdminOrderCtrl', ['$scope', '$routeParams', 'OrderSrv', 'ngNotify',\r\n    function($scope, $routeParams, orderSrv, ngNotify) {\r\n        $scope.order = orderSrv.list[$routeParams.id];\r\n        $scope.transportFee = ($scope.order.transport == 2) ? 800 : 0;\r\n        $scope.order.total = parseInt($scope.order.price) + parseInt($scope.transportFee) + parseInt($scope.order.weight);\r\n        $scope.updateTotal = function() {\r\n            $scope.order.total = parseInt($scope.order.price) + parseInt($scope.transportFee) + parseInt($scope.order.weight);\r\n        }\r\n        $scope.save = function() {\r\n            $scope.order.fee = $scope.transportFee;\r\n            ngNotify.set('Order updated.', 'success');\r\n            orderSrv.update($routeParams.id, $scope.order);\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('AdminOrdersCtrl', ['$scope', 'OrderSrv',\r\n    function($scope, orderSrv) {\r\n        $scope.orders = orderSrv.list;\r\n    }\r\n]);\r\nappControllers.controller('AdminPaymentsCtrl', ['$scope', 'PaymentSrv',\r\n    function($scope, paymentSrv) {\r\n        $scope.payments = paymentSrv.list\r\n    }\r\n]);\r\nappControllers.controller('AdminCheckCtrl', ['$scope', '$cookies', '$routeParams', 'PaymentSrv',\r\n    function($scope, $cookies, $routeParams, paymentSrv) {\r\n        $scope.payment = paymentSrv.list[$routeParams.id]\r\n        $scope.print = function(payment) {\r\n            $cookies.put('payment', JSON.stringify(payment));\r\n            var win = window.open('/partials/admin/print.html', '_blank');\r\n            if (win) {\r\n                win.focus();\r\n            } else {\r\n                alert('Please allow popups for this site');\r\n            }\r\n        }\r\n    }\r\n]);\r\n/*User Controllers*/\r\nappControllers.controller('CartCtrl', ['$scope', '$cookies', '$timeout', '$location', 'CartSrv', 'OrderSrv', 'ngNotify',\r\n    function($scope, $cookies, $timeout, $location, cartSrv, orderSrv, ngNotify) {\r\n        $scope.order = {\r\n            id: 0,\r\n            label: '',\r\n            address: '',\r\n            transport: 2,\r\n            status: 1,\r\n            fee: 0,\r\n            price: 0,\r\n            total: 0,\r\n            weight: 0,\r\n            user: {},\r\n            items: []\r\n        };\r\n        $scope.items = cartSrv.update();\r\n        $scope.delete = function(id) {\r\n            cartSrv.del(id);\r\n            $scope.items = cartSrv.order;\r\n        };\r\n        $scope.placeOrder = function(order) {\r\n            console.log('Here');\r\n            order.id = orderSrv.list.length + 1;\r\n            order.items = $scope.items;\r\n            order.items.forEach(function(item, index) {\r\n                order.weight += item.product.weight * item.amount;\r\n                order.price += item.product.price * item.amount;\r\n            });\r\n            order.user = JSON.parse($cookies.get('user'));\r\n            order.label = 'WPS0' + orderSrv.list.length;\r\n            orderSrv.add(order, null);\r\n            cartSrv.clear();\r\n            $scope.items = cartSrv.update();\r\n            ngNotify.set('New order placed. Please wait for admin to approve.', 'success');\r\n            $timeout(function() {\r\n                $cookies.put('order', JSON.stringify(order));\r\n                $location.path('/orders');\r\n            }, 2000);\r\n        };\r\n        $scope.isEnough = function() {\r\n            var totalAmount = 0;\r\n            $scope.items.forEach(function(item, index) {\r\n                totalAmount += item.amount;\r\n            });\r\n            if (totalAmount > 20) return false;\r\n            else return true;\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('ConfirmCtrl', ['$scope', '$cookies', '$location',\r\n    function($scope, $cookies, $location) {\r\n        $scope.payment = {\r\n            order: null,\r\n            method: 0\r\n        };\r\n        $scope.order = JSON.parse($cookies.get('order'));\r\n        $scope.pay = function(order) {\r\n            $cookies.put('order', JSON.stringify(order));\r\n            $location.path('/payment/normal');\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('PaymentCtrl', ['$scope', '$cookies', '$location', 'PaymentSrv', 'OrderSrv', 'ngNotify',\r\n    function($scope, $cookies, $location, paymentSrv, orderSrv, ngNotify) {\r\n        $scope.payment = {\r\n            id: 0,\r\n            order: null,\r\n            proof: '',\r\n            method: 0,\r\n            status: 'Pending'\r\n        };\r\n        $scope.order = JSON.parse($cookies.get('order'));\r\n        $scope.pay = function(payment) {\r\n            $scope.order.status = 4;\r\n            orderSrv.updateById($scope.order);\r\n            payment.order = $scope.order;\r\n            payment.method = 1;\r\n            payment.status = 'Paid';\r\n            ngNotify.set('Thanks for purchase at us.', 'success');\r\n            paymentSrv.add(payment);\r\n            //        $location.path('/summary');\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('PaypalCtrl', ['$scope', '$cookies', '$location', 'PaymentSrv', 'ngNotify',\r\n    function($scope, $cookies, $location, paymentSrv, ngNotify) {\r\n        $scope.payment = {\r\n            order: null,\r\n            proof: '',\r\n            method: 0\r\n        };\r\n        $scope.order = JSON.parse($cookies.get('order'));\r\n        $scope.pay = function(payment) {\r\n            ngNotify.set('Save payment', 'success');\r\n            paymentSrv.add(payment);\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('SummaryCtrl', ['$scope', '$cookies', '$location', 'PaymentSrv', 'ngNotify',\r\n    function($scope, $cookies, $location, paymentSrv, ngNotify) {\r\n        $scope.payment = {\r\n            order: null,\r\n            proof: '',\r\n            method: 0\r\n        };\r\n        $scope.order = JSON.parse($cookies.get('order'));\r\n        $scope.pay = function(payment) {\r\n            ngNotify.set('Save payment', 'success');\r\n            paymentSrv.add(payment);\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('OrdersCtrl', ['$scope', '$cookies', '$location', 'OrderSrv',\r\n    function($scope, $cookies, $location, orderSrv) {\r\n        var user = JSON.parse($cookies.get('user'));\r\n        $scope.orders = orderSrv.findByUser(user.email);\r\n        $scope.pay = function(order) {\r\n            $cookies.put('order', JSON.stringify(order));\r\n            $location.path('/payment');\r\n        };\r\n    }\r\n]);\r\n/*Shared Controllers*/\r\nappControllers.controller('HeaderCtrl', ['$scope', '$cookies',\r\n    function($scope, $cookies) {\r\n        $scope.isRetail = function(){\r\n            var raw = $cookies.get('user');\r\n            if(raw){\r\n                var user = JSON.parse(raw);\r\n                if(user.type == 1){\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n        $scope.isWholesale = function(){\r\n            var raw = $cookies.get('user');\r\n            if(raw){\r\n                var user = JSON.parse(raw);\r\n                if(user.type == 2){\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n    }\r\n]);\r\nappControllers.controller('FooterCtrl', ['$scope',\r\n    function($scope) {\r\n        var self = this;\r\n        self.texts = ['A', 'B', 'C'];\r\n        //    $scope.texts = ['A','B','C'];\r\n    }\r\n]);\r\nappControllers.controller('SideMenuCtrl', ['$scope', '$cookies', '$location',\r\n    function($scope, $cookies, $location) {\r\n        var self = this;\r\n        self.texts = ['A', 'B', 'C'];\r\n        $scope.$on('isAdmin', function(event, msg) {\r\n            self.updateIsAdmin();\r\n        });\r\n        $scope.$on('isUser', function(event, msg) {\r\n            self.updateIsUser();\r\n        });\r\n        self.isAdmin = $cookies.get('admin') ? true : false;\r\n        self.isUser = $cookies.get('auth') ? true : false;\r\n        self.updateIsAdmin = function() {\r\n            self.isAdmin = $cookies.get('admin') ? true : false;\r\n        };\r\n        self.updateIsUser = function() {\r\n            self.isUser = $cookies.get('auth') ? true : false;\r\n        };\r\n        self.logout = function() {\r\n            // console.log(\"test\");\r\n            $cookies.remove('auth');\r\n            $cookies.remove('admin');\r\n            $cookies.remove('order');\r\n            $cookies.remove('user');\r\n            self.updateIsAdmin();\r\n            self.updateIsUser();\r\n            $location.path('/#/');\r\n        };\r\n    }\r\n]);","var appServices = angular.module('appServices', []);\r\nappServices.factory('UserSrv', function($http, DatabaseSrv) {\r\n    var users = {};\r\n    users.validate = function(user, callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"customer/auth\";\r\n        database.data = {\r\n            email: user.email,\r\n            password: user.password\r\n        };\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // var valid = users.list[user.username];\r\n        // if (valid) {\r\n        //     if (valid.password == user.password) {\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        // return false;\r\n    };\r\n    users.register = function(user, callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"customer/add\";\r\n        database.data = {\r\n            email: user.email,\r\n            password: user.password\r\n        };\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // if (users.list[user.username]) {\r\n        //     return false;\r\n        // } else {\r\n        //     users.list[user.username] = {\r\n        //         password: user.password\r\n        //     };\r\n        //     return true;\r\n        // }\r\n    };\r\n    users.del = function(index) {\r\n        delete users.list[index];\r\n    };\r\n    users.list = {\r\n        'user1@a.a': {\r\n            password: '1234',\r\n            type: '1'\r\n        },\r\n        'user2@a.a': {\r\n            password: '1234',\r\n            type: '1'\r\n        },\r\n        'user3@a.a': {\r\n            password: '1234',\r\n            type: '1'\r\n        },\r\n        'user4@a.a': {\r\n            password: '1234',\r\n            type: '1'\r\n        },\r\n        'user5@a.a': {\r\n            password: '1234',\r\n            type: '2'\r\n        }\r\n    };\r\n    return users;\r\n});\r\nappServices.factory('ProductSrv', function(DatabaseSrv) {\r\n    var products = {};\r\n    products.get = function(index) {\r\n        return products.list[index];\r\n    };\r\n    products.getById = function(id) {\r\n        var product = null;\r\n        products.list.forEach(function(item, index) {\r\n            if (item.id == id) {\r\n                product = item\r\n            }\r\n        });\r\n        return product;\r\n    };\r\n    products.add = function(product, callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"product/add\";\r\n        database.data = product;\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // products.list.push(product);\r\n    };\r\n    products.update = function(product, callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"product/edit\";\r\n        database.data = product;\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // products.list[index] = product;\r\n    };\r\n    products.del = function(product, callback) {\r\n        // if (id == 0) {\r\n        //     products.list.splice(0, 1);\r\n        // } else {\r\n        //     products.list.splice(id, 1);\r\n        // }\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"product/delete\";\r\n        database.data = product;\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // products.list.splice(index);\r\n        // delete products.list[id];\r\n    };\r\n    products.fetch = function(callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"GET\";\r\n        database.path = \"product/\";\r\n        database.req(function(res) {\r\n            products.list = res.data;\r\n            callback(res);\r\n        });\r\n    };\r\n    products.list = [{\r\n        id: 1,\r\n        name: 'Product A',\r\n        price: 100,\r\n        code: 'PA001',\r\n        stock: 10,\r\n        weight: 1,\r\n        description: \"This is product A\",\r\n        contact: '081-111-1111',\r\n        status: 1,\r\n        source: 'This product come from village A',\r\n        reviews: [{\r\n            email: 'Customer A',\r\n            score: 3,\r\n            info: 'This is product A quality'\r\n        }, {\r\n            email: 'Customer B',\r\n            score: 5,\r\n            info: 'Perfect'\r\n        }]\r\n    }, {\r\n        id: 2,\r\n        name: 'Product B',\r\n        price: 50,\r\n        code: 'PB001',\r\n        stock: 100,\r\n        weight: 2,\r\n        description: \"This is product B\",\r\n        contact: '081-111-1111',\r\n        status: 1,\r\n        source: 'This product come from village B',\r\n        reviews: []\r\n    }, {\r\n        id: 3,\r\n        name: 'Product C',\r\n        price: 200,\r\n        code: 'PC001',\r\n        stock: 5,\r\n        weight: 3,\r\n        description: \"This is product C\",\r\n        contact: '081-111-1111',\r\n        status: 1,\r\n        source: 'This product come from village C',\r\n        reviews: []\r\n    }, {\r\n        id: 4,\r\n        name: 'Product D',\r\n        price: 150,\r\n        code: 'PD001',\r\n        stock: 3,\r\n        weight: 1,\r\n        description: \"This is product D\",\r\n        contact: '081-111-1111',\r\n        status: 2,\r\n        source: 'This product come from village D',\r\n        reviews: []\r\n    }, {\r\n        id: 5,\r\n        name: 'Product E',\r\n        price: 199,\r\n        code: 'PE001',\r\n        stock: 20,\r\n        weight: 1,\r\n        description: \"This is product E\",\r\n        contact: '081-111-1111',\r\n        status: 1,\r\n        source: 'This product come from village E',\r\n        reviews: []\r\n    }, {\r\n        id: 6,\r\n        name: 'Product F',\r\n        price: 30.5,\r\n        code: 'PF001',\r\n        stock: 34,\r\n        weight: 1,\r\n        description: \"This is product F\",\r\n        contact: '081-111-1111',\r\n        status: 1,\r\n        source: 'This product come from village F',\r\n        reviews: []\r\n    }];\r\n    return products;\r\n});\r\nappServices.factory('CartSrv', function($cookies) {\r\n    var cart = {};\r\n    cart.init = function() {\r\n        $cookies.put('cart', JSON.stringify([]));\r\n    };\r\n    cart.update = function() {\r\n        $cookies.put('cart', JSON.stringify(cart.order));\r\n        return cart.order;\r\n    };\r\n    cart.clear = function() {\r\n        $cookies.put('cart', JSON.stringify([]));\r\n        cart.order = JSON.parse($cookies.get('cart'));\r\n    };\r\n    cart.add = function(product, amount) {\r\n        var notFound = true;\r\n        cart.order.forEach(function(item, index) {\r\n            if (item.product.id == product.id) {\r\n                cart.order[index].amount += amount;\r\n                notFound = false;\r\n            }\r\n        });\r\n        if (notFound) {\r\n            var newProduct = {\r\n                product: product,\r\n                amount: amount\r\n            };\r\n            cart.order.push(newProduct);\r\n        }\r\n        cart.update();\r\n    };\r\n    cart.del = function(id) {\r\n        if (id == 0) {\r\n            cart.order.splice(0, 1);\r\n        } else {\r\n            cart.order.splice(id, id);\r\n        }\r\n        cart.update();\r\n    };\r\n    if (!$cookies.get('cart')) {\r\n        cart.init();\r\n    }\r\n    cart.order = JSON.parse($cookies.get('cart'));\r\n    return cart;\r\n});\r\nappServices.factory('OrderSrv', function(DatabaseSrv) {\r\n    var orders = {};\r\n    orders.add = function(order, callback) {\r\n        // var database = DatabaseSrv;\r\n        // database.method = \"POST\";\r\n        // database.path = \"order/add\";\r\n        // database.data = order;\r\n        // database.req(function(res) {\r\n        //     if (callback) callback(res);\r\n        // });\r\n        orders.list.push(order);\r\n    };\r\n    orders.del = function(id) {\r\n        delete order.list[id];\r\n    };\r\n    orders.update = function(index, order) {\r\n        orders.list[index] = order;\r\n    };\r\n    orders.updateById = function(order) {\r\n        orders.list.forEach(function(item, index) {\r\n            if (item.id == order.id) {\r\n                orders.list[index] = order;\r\n            }\r\n        });\r\n    };\r\n    orders.findByUser = function(email) {\r\n        var result = [];\r\n        orders.list.forEach(function(item, index) {\r\n            if (item.user.email == email) {\r\n                result.push(item);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n    orders.list = [];\r\n    return orders;\r\n});\r\nappServices.factory('PaymentSrv', function() {\r\n    var payments = {};\r\n    payments.add = function(payment) {\r\n        payments.list.push(payment);\r\n    };\r\n    payments.del = function(id) {\r\n        delete payments.list[id];\r\n    };\r\n    payments.list = [];\r\n    return payments;\r\n});\r\n/*Admin Service*/\r\nappServices.factory('AdminSrv', function(DatabaseSrv) {\r\n    var admins = {};\r\n    admins.validate = function(user, callback) {\r\n        var database = DatabaseSrv;\r\n        database.method = \"POST\";\r\n        database.path = \"admin/auth\";\r\n        database.data = {\r\n            email: user.email,\r\n            password: user.password\r\n        };\r\n        database.req(function(res) {\r\n            callback(res);\r\n        });\r\n        // var valid = admins.list[user.username];\r\n        // if (valid) {\r\n        //     if (valid.password == user.password) {\r\n        //         return true;\r\n        //     }\r\n        // }\r\n        // return false;\r\n    };\r\n    admins.register = function(user) {\r\n        if (admins.list[user.username]) {\r\n            return false;\r\n        } else {\r\n            admins.list[user.username] = {\r\n                password: user.password\r\n            };\r\n            return true;\r\n        }\r\n    };\r\n    admins.list = {\r\n        'admin1@a.a': {\r\n            password: '1234'\r\n        },\r\n        'admin2@a.a': {\r\n            password: '1234'\r\n        },\r\n        'admin3@a.a': {\r\n            password: '1234'\r\n        },\r\n        'admin4@a.a': {\r\n            password: '1234'\r\n        },\r\n        'admin5@a.a': {\r\n            password: '1234'\r\n        }\r\n    };\r\n    return admins;\r\n});\r\n/*Database*/\r\nappServices.factory('DatabaseSrv', [\"$http\",\r\n    function($http) {\r\n        var database = {\r\n            server: \"http://localhost:8090/\",\r\n            path: \"\",\r\n            method: \"GET\",\r\n            data: null,\r\n            prepared: function() {\r\n                return {\r\n                    method: this.method,\r\n                    url: this.server + this.path,\r\n                    data: this.data\r\n                };\r\n            },\r\n            req: function(callback) {\r\n                $http(this.prepared()).then(function successCallback(response) {\r\n                    console.log(response);\r\n                    callback(response);\r\n                }, function errorCallback(response) {\r\n                    console.log(response);\r\n                    callback(response);\r\n                });\r\n            }\r\n        }\r\n        return database;\r\n    }\r\n]);"],"sourceRoot":"/source/"}